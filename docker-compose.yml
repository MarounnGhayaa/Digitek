services:
  # PHP/Laravel Service
  app:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    working_dir: /var/www
    env_file:
      - ./server/.env
    volumes:
      - ./server:/var/www
      - laravel-storage:/var/www/storage
      - laravel-cache:/var/www/bootstrap/cache
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    # This command block is the most reliable for local development
    command: |
      sh -c "
      echo '🚀 Starting Laravel application...'

      chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache
      chmod -R ug+rwX /var/www/storage /var/www/bootstrap/cache

      # Run composer install only if not already done
      if [ ! -f vendor/autoload.php ]; then
        echo '⚙️ Installing dependencies...'
        composer install --dev --optimize-autoloader --no-interaction
      fi

      # Generate application key if it doesn't exist
      if [ ! -f .env ]; then
        echo '⚙️ Creating .env file...'
        cp .env.example .env
        php artisan key:generate --force
      fi

      # Run migrations and seeders every time the container starts
      echo '🔄 Running database migrations...'
      php artisan migrate --force

      echo '🌱 Running database seeders...'
      php artisan db:seed --force

      # Clear any application caches
      php artisan config:clear
      php artisan route:clear
      php artisan view:clear

      echo '🎯 Laravel ready! Starting PHP-FPM...'
      php-fpm
      "
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - APP_ENV=local
    healthcheck:
      test: ["CMD-SHELL", "php artisan inspire > /dev/null 2>&1 || exit 1"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 60s
    networks:
      - app-network

  # Nginx Web Server
  webserver:
    image: nginx:alpine
    container_name: nginx-server
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server:/var/www:ro,cached
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      timeout: 3s
      retries: 3
      interval: 10s
    networks:
      - app-network

  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=digitek_db
      - MYSQL_ROOT_PASSWORD=root
      # Performance optimizations
      - MYSQL_INITDB_SKIP_TZINFO=1
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      # MySQL performance config
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --innodb-flush-method=O_DIRECT
      --skip-name-resolve
      --max_connections=200
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      timeout: 10s
      retries: 10
      interval: 5s
      start_period: 30s
    networks:
      - app-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 60 1000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 5s
      start_period: 10s
    networks:
      - app-network

  # PhpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_ARBITRARY=1
      - UPLOAD_LIMIT=64M
      - MEMORY_LIMIT=512M
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  # React Frontend Service
  client:
    build:
      context: ./client/digitek
      dockerfile: Dockerfile
    container_name: react-app
    restart: unless-stopped
    volumes:
      - ./client/digitek:/app:cached
      - node_modules:/app/node_modules
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - VITE_API_URL=http://localhost
      - VITE_HMR_HOST=localhost
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      timeout: 10s
      retries: 3
      interval: 30s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  node_modules:
    driver: local
  laravel-storage:
    driver: local
  laravel-cache:
    driver: local
  nginx-logs:
    driver: local
